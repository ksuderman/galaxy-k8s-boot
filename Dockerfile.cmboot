ARG MAJOR_VERSION=20
ARG BASE_IMAGE=ubuntu:$MAJOR_VERSION.04
ARG WORK_DIR=/opt/galaxy-k8s-boot

#=================================
# STAGE 1
#=================================
FROM $BASE_IMAGE as stage1

ENV PYTHONUNBUFFERED 1
ARG DEBIAN_FRONTEND=noninteractive
ARG WORK_DIR

RUN echo "===> Installing system packages..." \
    && mkdir -p $WORK_DIR \
    && apt-get -qq update && apt-get install -y --no-install-recommends \
        python3-virtualenv \
        # Needed to install netaddr
        gcc \
        curl \
        python3-dev \
        python3-pip \
        python3-setuptools \
    && echo "===> Setup python..."  \
    && virtualenv -p python3 --prompt "(cloudman-boot)" $WORK_DIR/venv \
    # netaddr is for ansible's ipaddr module
    && $WORK_DIR/venv/bin/pip3 install --no-cache-dir ansible requests docker cloudbridge netaddr \
    && apt-get autoremove -y && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/*


#=================================
# STAGE 2
#================================
FROM $BASE_IMAGE as stage2

#ENV KUBE_LATEST_VERSION=v1.19.0
ENV KUBE_LATEST_VERSION=v1.31.3
ENV RKE_IN_DOCKER=true
ENV PYTHONUNBUFFERED 1
ARG DEBIAN_FRONTEND=noninteractive
ARG WORK_DIR

RUN echo "===> Installing system packages..." \
    && apt-get -qq update && apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        python3-virtualenv \
        python3-pip \
        docker.io \
        # used by helm installer
        gawk \
        # needed by csi-drivers
        nfs-common \
        dbus systemd systemd-sysv systemd-cron rsyslog \
    && echo "==> Installing latest kubectl..." \
    && curl -L https://storage.googleapis.com/kubernetes-release/release/${KUBE_LATEST_VERSION}/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl \
    && chmod +x /usr/local/bin/kubectl \
    && apt-get autoremove -y && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && mkdir -p $WORK_DIR

COPY --from=stage1 $WORK_DIR $WORK_DIR

WORKDIR /opt/galaxy-k8s-boot
COPY requirements*.txt $WORK_DIR/
COPY ./k3s $WORK_DIR/k3s
COPY ./rke $WORK_DIR/rke
COPY ./values $WORK_DIR/values
COPY *.yml $WORK_DIR/
COPY ./inventories/*.ini $WORK_DIR/inventories/
COPY ./templates $WORK_DIR/templates
COPY ./run.sh $WORK_DIR/run.sh
COPY ./bin $WORK_DIR/bin
COPY ./roles $WORK_DIR/roles

FROM stage2 as ubuntu-20
#RUN pip install --no-cache-dir --break-system-packages -r requirements-$MAJOR_VERSION.txt
RUN pip install --no-cache-dir -r requirements.txt

FROM stage2 as ubuntu-24
RUN pip install --no-cache-dir --break-system-packages -r requirements-$MAJOR_VERSION.txt
#RUN pip install --no-cache-dir -r requirements.txt

FROM ubuntu-$MAJOR_VERSION as final
ARG KUBE_CLOUD_PROVIDER=openstack
ARG K8S_PROVIDER=k3s
ENV ANSIBLE_DEBUG=${ANSIBLE_DEBUG:--v}
CMD ["ansible-playbook", "-i", "inventories/localhost.ini", "playbook.yml", "-e", "kube_cloud_provider=$KUBE_CLOUD_PROVIDER", "-e", "k8s_provider=$K8S_PROVIDER", "--connection=local"]
